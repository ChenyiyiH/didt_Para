function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 30-Aug-2024 14:16:49.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx2 matrix, input #1
% and returns:
%   y = Qx2 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [599.560952465381;4.49434424568591e-06];
x1_step1.gain = [0.00210161881871374;141486.918983504];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.3098464913962664102;0.49630546176192752439;1.0142044878720899437;0.20428315018092971234;3.2486202820902763122];
IW1_1 = [2.5602951755582994409 1.3743032122025837793;-0.94275834682555459398 0.33199658174544877109;-2.4397467712663241102 -1.7476900916974005273;-0.69254071371008107949 -0.13754436615823711909;0.085551233650365390848 -2.7281044882756666503];

% Layer 2
b2 = [-0.033224136507000234797;-0.24849174087510275677];
LW2_1 = [-2.2981738369285360513 1.5500243709692274052 -2.6358205058981560853 -3.6462225776784977782 0.45969634976302153895;0.16840476155554473525 -0.25633220672186524114 0.42504903074217947889 0.10313853444172835228 -0.046302386735090052261];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [4.08163265306123;51282.0512820513];
y1_step1.xoffset = [0.2;1e-05];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
